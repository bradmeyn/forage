@using PagedList.Mvc;
@model Forage.ViewModels.RestaurantIndexViewModel 
@{ ViewData["Title"] ="Restaurants"; }
<form action="" method="GET" id="filterForm">
<div class="container-lg mb-5">
<partial name="_Alerts" />
  <div
    class="border-bottom border-muted my-3 pb-2 d-flex justify-content-between align-items-center"
  >
    <h1 class="fs-3 fw-semibold">Restaurants</h1>    
  </div>
  <div class="row">
    <div class="col-md-3">
    <!-- Sort By -->
    <div class="pb-3" >
      <select class="form-select" name="SortBy">
          <option value="name_asc" selected="@(Model.SortBy == "name_asc")">Name (A-Z)</option>
          <option value="name_desc" selected="@(Model.SortBy == "name_desc")">Name (Z-A)</option>
          <option value="rating_asc" selected="@(Model.SortBy == "rating_asc")">Rating (Low to High)</option>
          <option value="rating_desc" selected="@(Model.SortBy == "rating_desc")">Rating (High to Low)</option>
           <option value="newest" selected="@(Model.SortBy == "newest")">Newest</option>
      </select>
    </div>
    </div>
    <div class="col-md-9">

     <div class="d-flex align-items-center">

       <div
        class="d-flex flex-grow-1 align-items-center border border-muted border-2 mb-2 px-3 rounded-pill search-container"
      >
        <span class="p-2"><i class="bi bi-search fs-5 text-muted"></i></span>
        <input type="search" class="form-control border-0 p-2" id="searchInput" placeholder="Search restaurants" name="searchQuery" value="@Model.SearchQuery"/>
      </div>
    <button
      type="button"
      class="btn text-primary ms-auto d-block d-md-none fs-3"
      id="mobileFilterButton"
    >
      <i class="bi bi-filter-circle"></i>
    </button>
     </div>
    </div>
  </div>
  <div class="row">
    <div class="col-12 col-md-3">
      <partial name="_RestaurantFilterDesktop" model="Model" />
    </div>

    <div class="col-12 col-md-9 pb-4">

       @foreach (var restaurant in Model.Restaurants)
      {
      <div class="text-dark bg-white d-flex align-items-start border-bottom border-muted shadow-sm mb-3 rounded">
        <div class="rounded p-3">
            <img class="rounded" 
            src="@restaurant.ImageURL" 
            alt="Image of @restaurant.Name" aria-label="Image of @restaurant.Name"
                    style="width: 200px; height: 150px; object-fit: cover;" />
        </div>
        <div class="d-flex flex-grow-1">
            <div class="p-3 w-100">
               <div class="d-flex flex-wrap justify-content-between">
                <a class="text-dark" href="@Url.Action("Detail", "Restaurant", new { id = restaurant.Id })">
      <h2 class="fs-4">@restaurant.Name</h2></a>

                @if (restaurant.OnlineBooking)
                {
                  <a class="d-block ms-auto btn btn-sm btn-primary" href="/restaurants/@restaurant.Id/bookings/new">Book a table</a>
                }
               </div>
                @{
      double averageRating = 0;
      int numberOfReviews = 0;

    if (restaurant.Reviews != null)
    {
        averageRating = restaurant.Reviews.Select(r => r.Rating).DefaultIfEmpty().Average();
        numberOfReviews = restaurant.Reviews.Count;
    }}

<div>
    @for (int i = 1; i <= 5; i++)
    {
        if (i <= averageRating)
        {
            <i class="bi bi-star-fill text-primary"></i>
        }
        else if (i - 0.5 <= averageRating)
        {
            <i class="bi bi-star-half text-primary"></i>
        }
        else
        {
            <i class="bi bi-star text-primary"></i>
        }
    }
    <span>(@numberOfReviews)</span>
</div>
        <div class="text-muted">
                <span>@restaurant.Cuisine</span>
                &#8226;
                  <span>
                    @(restaurant.Pricing switch
                    {
                        PricingOption.CheapEats => "$",
                        PricingOption.BudgetFriendly => "$$",
                        PricingOption.MidRange => "$$$",
                        PricingOption.FineDining => "$$$$",
                        _ => ""
                    })
                </span>
            </div>
            <div class="d-flex flex-wrap">
                @if (restaurant.VegetarianOptions)
                {
                    <div class="me-4">
                        <i class="bi bi-check2-circle text-success"></i>
                        <span class="text-muted">Vegetarian Options</span>
                    </div>
                }
                @if (restaurant.VeganOptions)
                {
                    <div class="me-4">
                        <i class="bi bi-check2-circle text-success"></i>
                        <span class="text-muted">Vegan Options</span>
                    </div>
                }
                @if (restaurant.GlutenFreeOptions)
                {
                    <div class="me-4">
                        <i class="bi bi-check2-circle text-success"></i>
                        <span class="text-muted">Gluten-Free Options</span>
                    </div>
                }
            </div>
            
        </div>
        </div>
        </div>
}
@if (Model.Restaurants.Count() == 0){
  <div class="text-center mt-3">
    <h2 class="text-muted">No restaurants found</h2>
  </div>
} else {
  <div class="d-flex justify-content-center">
     <nav aria-label="Page navigation ">
  <ul class="pagination">
    @{
      int totalPages = (int)Math.Ceiling((double)Model.TotalRestaurants / Model.PageSize);
    }
    @for (int i = 1; i <= totalPages; i++)
    {
      <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
  <a class="page-link" href="@Url.Action("Index", "Restaurant", new {
      CurrentPage = i,
      SearchQuery = Model.SearchQuery,
      SortBy = Model.SortBy,
      SelectedCuisines = Model.SelectedCuisines,
      SelectedPricing = Model.SelectedPricing,
      Vegetarian = Model.Vegetarian,
      Vegan = Model.Vegan,
      GlutenFree = Model.GlutenFree,
      DineIn = Model.DineIn,
      TakeAway = Model.TakeAway,
      Booking = Model.Booking
  })">@i</a>
</li>

    }
  </ul>
</nav>
  </div>
}
    </div>
  </div>
 
</form>

<script>
const searchInput = document.getElementById("searchInput");
const filterForm = document.getElementById("filterForm");

const mobileFilterButton = document.getElementById("mobileFilterButton");
const filterContainer = document.getElementById("filterContainer");



mobileFilterButton.addEventListener("click", () => {
  filterContainer.classList.toggle("d-none");
});

searchInput.addEventListener("keyup", (e) => {
  filterForm.submit();
  console.log(e.target.value);
});

</script>